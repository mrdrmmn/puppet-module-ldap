<%- 
  config = scope.to_hash
  config = scope.parent.to_hash if ! config.has_key?( 'server_nodes' )

  db_id = 0
  config['directories'].each do |base_dn|
    db_id += 1
    directory_path = "#{config['directory_base']}/#{base_dn}"
-%>
dn: olcDatabase=hdb,cn=config
objectClass: olcDatabaseConfig
objectClass: olcHdbConfig
olcDatabase: hdb
olcDbDirectory: <%= directory_path %>
olcSuffix: <%= base_dn %>
olcLastMod: TRUE
olcRootDN: <%= base_dn %>
olcRootPW: <%= scope.function_template( 'ldap/encrypt-password.erb' ) %>
olcAccess: to *
  by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage
  by * break
olcAccess: to attrs=userPassword,shadowLastChange
  by tls_ssf=<%= config['ssl_minimum'] %> self write
  by tls_ssf=<%= config['ssl_minimum'] %> anonymous auth
  by * none
olcAccess: to dn.base="" by ssf=<%= config['ssl_minimum'] %> * read
olcAccess: to *
  by tls_ssf=<%= config['ssl_minimum'] %> self write
  by tls_ssf=<%= config['ssl_minimum'] %> * read
olcDbConfig: set_cachesize 0 2097152 0
olcDbConfig: set_lk_max_objects 1500
olcDbConfig: set_lk_max_locks 1500
olcDbConfig: set_lk_max_lockers 1500
olcDbIndex: objectClass,entryCSN,entryUUID eq
<% if config['server_nodes'].length > 1 -%>
<% sid = 0 -%>
<% scope.function_template( 'ldap/generate-remote-uris.erb' ).split( /\s+/ ).each do |uri| -%>
olcSyncRepl: rid=<%= sid += 1 %> provider=<%= uri %> binddn=<%= base_dn %> bindmethod=simple
  credentials=<%= password %> searchbase=<%= base_dn %> type=refreshAndPersist
  tls_reqcert=<%= config['ssl_verify_certs'] %> retry="5 5 300 5" timeout=1
<% end -%>
olcMirrorMode: TRUE

dn: olcOverlay=syncprov,olcDatabase={<%= db_id %>}hdb,cn=config
objectClass: olcOverlayConfig
objectClass: olcSyncProvConfig
olcOverlay: syncprov
<% end -%>
<%
  end
-%>
